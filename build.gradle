plugins {
    id 'java'
    id 'io.papermc.paperweight.userdev' version '2.0.0-beta.16'
    id 'com.github.hierynomus.license' version '0.16.1'
}

group = 'me.asone'
version = 'v' + project.plugin_version + '-Paper' + project.mc_version

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "dmulloy2"
        url = "https://repo.dmulloy2.net/repository/public/"
    }
    flatDir {
        dirs 'lib'
    }
}

dependencies {
//    compileOnly("dev.folia:folia-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly 'com.comphenix.protocol:ProtocolLib:5.1.0'
    compileOnly name: 'CMILib1.5.4.1'
    compileOnly name: 'Residence5.1.7.3'
    compileOnly 'cn.lunadeer:DominionAPI:4.3'
    paperweight.paperDevBundle("1.21.4-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.assemble {
    dependsOn(tasks.reobfJar)
}

processResources {
    def props = [
            plugin_version: project.plugin_version,
            mc_version: project.mc_version
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_DataSyncer" }
    }
}

license {
    // use "gradle licenseFormat" to apply license headers
    header = rootProject.file('HEADER.txt')
    include '**/*.java'
    skipExistingHeaders = true

    headerDefinitions {
        // ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
        // modification: add a newline at the end
        SLASHSTAR_STYLE_NEWLINE {
            firstLine = "/*"
            beforeEachLine = " * "
            endLine = " */" + System.lineSeparator()
            afterEachLine = ""
            skipLinePattern = null
            firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
            lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
            allowBlankLines = false
            isMultiline = true
            padLines = false
        }
    }
    mapping {
        java = 'SLASHSTAR_STYLE_NEWLINE'
    }
    ext {
        name = 'DataSyncer'
        author = 'As_One'
        year = Calendar.getInstance().get(Calendar.YEAR).toString()
    }
}